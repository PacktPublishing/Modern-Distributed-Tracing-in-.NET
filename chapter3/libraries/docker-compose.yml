version: "3.9"
services:
  frontend:
    build:
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      - "5051:5051"
    depends_on:
      - storage
      - otelcollector
    environment:
      - Storage__Endpoint=http://storage:5050
      - ASPNETCORE_URLS=http://+:5051
      - OTEL_SERVICE_NAME=frontend
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcollector:4317
  storage:
    build:
      context: ./
      dockerfile: ./storage/Dockerfile
    ports:
      - "5050:5050"
    depends_on:
      - redis
      - otelcollector
    environment:
      - ASPNETCORE_URLS=http://+:5050
      - OTEL_SERVICE_NAME=storage
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcollector:4317
      # for demo purposes only, make sure to pass environment securely
      - CloudStorage__AzureBlob__ConnectionString=${AZURE_BLOB_CONNECTION_STRING}
      - Redis__ConnectionString=redis:6379
    volumes:
      - '${HOME}/.aws/credentials:/root/.aws/credentials'
  redis:
    image: redis:7.0.11
    restart: always
    ports:
      - "6379:6379"
    command: [ "redis-server", "--bind", "redis", "--port", "6379"]
  otelcollector:
    image: otel/opentelemetry-collector-contrib:0.78.0
    command: ["--config=/etc/otel-collector-config.yml"]
    ports:
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "55679:55679" # zpages extension
    volumes:
      - //var/run/docker.sock:/var/run/docker.sock
      - ./configs/otel-collector-config.yml:/etc/otel-collector-config.yml
    depends_on:
      - jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.45.0
    ports:
      - "14250:14250"
      - "14268:14268"
      - "6831:6831/udp"
      - "16686:16686"
      - "16685:16685"
  prometheus:
    image: prom/prometheus:v2.44.0
    volumes:
      - ./configs/prometheus-otel.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - otelcollector

volumes:
  mysql_data:
    driver: local